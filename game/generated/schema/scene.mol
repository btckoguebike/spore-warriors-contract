import types;

table NodeEnemy {
    count: byte,
    enemy_pool: ResourceIdVec,
}

table NodeTreasureChest {
    pick: byte,
    count: byte,
    item_pool: ResourceIdVec,
}

table NodeRecoverPoint {
    hp_percent: byte,
}

table NodeItemMerchant {
    count: byte,
    item_pool: ResourceIdVec,
}

table NodeCardMerchant {
    count: byte,
    card_pool: ResourceIdVec,
}

table NodeUnknown {
    count: byte,
    system_pool: ContextVec,
}

table NodeCampsite {
    card_context: Context,
}

table NodeBarrier {}

table NodeStartingPoint {}

table NodeTargetingPoint {}

union NodeInstance {
    NodeEnemy,
    NodeTreasureChest,
    NodeRecoverPoint,
    NodeItemMerchant,
    NodeCardMerchant,
    NodeUnknown,
    NodeCampsite,
    NodeBarrier,
    NodeStartingPoint,
    NodeTargetingPoint,
}

table Size {
    x: byte,
    y: byte,
}

table LevelNode {
    visible: byte,
    size: Size,
    node: NodeInstance,
}

vector LevelNodeVec <LevelNode>;

table Coordinate {
    x: byte,
    y: byte,
}

vector CoordinateVec <Coordinate>;

table ScenePartition {
    start_point: Coordinate,
    end_point: Coordinate,
    count: RandomByte,
    node_pool: LevelNodeVec,
}

vector ScenePartitionVec <ScenePartition>;

table FixedLevelNode {
    point: Coordinate,
    node: LevelNode,
}

vector FixedLevelNodeVec <FixedLevelNode>;

// game playground
table MapScene {
    id: ResourceId,
    width: byte,
    height: byte,
    fixed_nodes: FixedLevelNodeVec,
    partition_list: ScenePartitionVec,
}

vector MapSceneVec <MapScene>;
