// Generated by Molecule 0.7.5

use super::resources::*;
use super::types::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct Warrior(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Warrior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Warrior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Warrior {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "special_cards", self.special_cards())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "gold", self.gold())?;
        write!(f, ", {}: {}", "power", self.power())?;
        write!(f, ", {}: {}", "motion", self.motion())?;
        write!(f, ", {}: {}", "view_range", self.view_range())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "attack_weak", self.attack_weak())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "defense_weak", self.defense_weak())?;
        write!(f, ", {}: {}", "physique", self.physique())?;
        write!(f, ", {}: {}", "draw_count", self.draw_count())?;
        write!(f, ", {}: {}", "deck_status", self.deck_status())?;
        write!(f, ", {}: {}", "package_status", self.package_status())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Warrior {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        Warrior::new_unchecked(v)
    }
}
impl Warrior {
    const DEFAULT_VALUE: [u8; 101] = [
        101, 0, 0, 0, 72, 0, 0, 0, 74, 0, 0, 0, 78, 0, 0, 0, 80, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0,
        84, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0,
        91, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 17;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> ResourceId {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ResourceId::new_unchecked(self.0.slice(start..end))
    }
    pub fn special_cards(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        ResourceIdVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn hp(&self) -> Number {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Number::new_unchecked(self.0.slice(start..end))
    }
    pub fn gold(&self) -> Number {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Number::new_unchecked(self.0.slice(start..end))
    }
    pub fn power(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn motion(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn view_range(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn armor(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn shield(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn attack(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn attack_weak(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn defense(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn defense_weak(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn physique(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        let end = molecule::unpack_number(&slice[60..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn draw_count(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[60..]) as usize;
        let end = molecule::unpack_number(&slice[64..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn deck_status(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[64..]) as usize;
        let end = molecule::unpack_number(&slice[68..]) as usize;
        ResourceIdVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn package_status(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[68..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[72..]) as usize;
            ResourceIdVec::new_unchecked(self.0.slice(start..end))
        } else {
            ResourceIdVec::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> WarriorReader<'r> {
        WarriorReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Warrior {
    type Builder = WarriorBuilder;
    const NAME: &'static str = "Warrior";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Warrior(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WarriorReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WarriorReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .id(self.id())
            .special_cards(self.special_cards())
            .hp(self.hp())
            .gold(self.gold())
            .power(self.power())
            .motion(self.motion())
            .view_range(self.view_range())
            .armor(self.armor())
            .shield(self.shield())
            .attack(self.attack())
            .attack_weak(self.attack_weak())
            .defense(self.defense())
            .defense_weak(self.defense_weak())
            .physique(self.physique())
            .draw_count(self.draw_count())
            .deck_status(self.deck_status())
            .package_status(self.package_status())
    }
}
#[derive(Clone, Copy)]
pub struct WarriorReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WarriorReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WarriorReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WarriorReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "special_cards", self.special_cards())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "gold", self.gold())?;
        write!(f, ", {}: {}", "power", self.power())?;
        write!(f, ", {}: {}", "motion", self.motion())?;
        write!(f, ", {}: {}", "view_range", self.view_range())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "attack_weak", self.attack_weak())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "defense_weak", self.defense_weak())?;
        write!(f, ", {}: {}", "physique", self.physique())?;
        write!(f, ", {}: {}", "draw_count", self.draw_count())?;
        write!(f, ", {}: {}", "deck_status", self.deck_status())?;
        write!(f, ", {}: {}", "package_status", self.package_status())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> WarriorReader<'r> {
    pub const FIELD_COUNT: usize = 17;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> ResourceIdReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ResourceIdReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn special_cards(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn hp(&self) -> NumberReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        NumberReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn gold(&self) -> NumberReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        NumberReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn power(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn motion(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn view_range(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn armor(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn shield(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn attack(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn attack_weak(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn defense(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn defense_weak(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn physique(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        let end = molecule::unpack_number(&slice[60..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn draw_count(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[60..]) as usize;
        let end = molecule::unpack_number(&slice[64..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn deck_status(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[64..]) as usize;
        let end = molecule::unpack_number(&slice[68..]) as usize;
        ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn package_status(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[68..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[72..]) as usize;
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WarriorReader<'r> {
    type Entity = Warrior;
    const NAME: &'static str = "WarriorReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        WarriorReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ResourceIdReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        NumberReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        NumberReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        ByteReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        ByteReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        ByteReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        ByteReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        ByteReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        ByteReader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        ByteReader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        ByteReader::verify(&slice[offsets[11]..offsets[12]], compatible)?;
        ByteReader::verify(&slice[offsets[12]..offsets[13]], compatible)?;
        ByteReader::verify(&slice[offsets[13]..offsets[14]], compatible)?;
        ByteReader::verify(&slice[offsets[14]..offsets[15]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[15]..offsets[16]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[16]..offsets[17]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct WarriorBuilder {
    pub(crate) id: ResourceId,
    pub(crate) special_cards: ResourceIdVec,
    pub(crate) hp: Number,
    pub(crate) gold: Number,
    pub(crate) power: Byte,
    pub(crate) motion: Byte,
    pub(crate) view_range: Byte,
    pub(crate) armor: Byte,
    pub(crate) shield: Byte,
    pub(crate) attack: Byte,
    pub(crate) attack_weak: Byte,
    pub(crate) defense: Byte,
    pub(crate) defense_weak: Byte,
    pub(crate) physique: Byte,
    pub(crate) draw_count: Byte,
    pub(crate) deck_status: ResourceIdVec,
    pub(crate) package_status: ResourceIdVec,
}
impl WarriorBuilder {
    pub const FIELD_COUNT: usize = 17;
    pub fn id(mut self, v: ResourceId) -> Self {
        self.id = v;
        self
    }
    pub fn special_cards(mut self, v: ResourceIdVec) -> Self {
        self.special_cards = v;
        self
    }
    pub fn hp(mut self, v: Number) -> Self {
        self.hp = v;
        self
    }
    pub fn gold(mut self, v: Number) -> Self {
        self.gold = v;
        self
    }
    pub fn power(mut self, v: Byte) -> Self {
        self.power = v;
        self
    }
    pub fn motion(mut self, v: Byte) -> Self {
        self.motion = v;
        self
    }
    pub fn view_range(mut self, v: Byte) -> Self {
        self.view_range = v;
        self
    }
    pub fn armor(mut self, v: Byte) -> Self {
        self.armor = v;
        self
    }
    pub fn shield(mut self, v: Byte) -> Self {
        self.shield = v;
        self
    }
    pub fn attack(mut self, v: Byte) -> Self {
        self.attack = v;
        self
    }
    pub fn attack_weak(mut self, v: Byte) -> Self {
        self.attack_weak = v;
        self
    }
    pub fn defense(mut self, v: Byte) -> Self {
        self.defense = v;
        self
    }
    pub fn defense_weak(mut self, v: Byte) -> Self {
        self.defense_weak = v;
        self
    }
    pub fn physique(mut self, v: Byte) -> Self {
        self.physique = v;
        self
    }
    pub fn draw_count(mut self, v: Byte) -> Self {
        self.draw_count = v;
        self
    }
    pub fn deck_status(mut self, v: ResourceIdVec) -> Self {
        self.deck_status = v;
        self
    }
    pub fn package_status(mut self, v: ResourceIdVec) -> Self {
        self.package_status = v;
        self
    }
}
impl molecule::prelude::Builder for WarriorBuilder {
    type Entity = Warrior;
    const NAME: &'static str = "WarriorBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.id.as_slice().len()
            + self.special_cards.as_slice().len()
            + self.hp.as_slice().len()
            + self.gold.as_slice().len()
            + self.power.as_slice().len()
            + self.motion.as_slice().len()
            + self.view_range.as_slice().len()
            + self.armor.as_slice().len()
            + self.shield.as_slice().len()
            + self.attack.as_slice().len()
            + self.attack_weak.as_slice().len()
            + self.defense.as_slice().len()
            + self.defense_weak.as_slice().len()
            + self.physique.as_slice().len()
            + self.draw_count.as_slice().len()
            + self.deck_status.as_slice().len()
            + self.package_status.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.id.as_slice().len();
        offsets.push(total_size);
        total_size += self.special_cards.as_slice().len();
        offsets.push(total_size);
        total_size += self.hp.as_slice().len();
        offsets.push(total_size);
        total_size += self.gold.as_slice().len();
        offsets.push(total_size);
        total_size += self.power.as_slice().len();
        offsets.push(total_size);
        total_size += self.motion.as_slice().len();
        offsets.push(total_size);
        total_size += self.view_range.as_slice().len();
        offsets.push(total_size);
        total_size += self.armor.as_slice().len();
        offsets.push(total_size);
        total_size += self.shield.as_slice().len();
        offsets.push(total_size);
        total_size += self.attack.as_slice().len();
        offsets.push(total_size);
        total_size += self.attack_weak.as_slice().len();
        offsets.push(total_size);
        total_size += self.defense.as_slice().len();
        offsets.push(total_size);
        total_size += self.defense_weak.as_slice().len();
        offsets.push(total_size);
        total_size += self.physique.as_slice().len();
        offsets.push(total_size);
        total_size += self.draw_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.deck_status.as_slice().len();
        offsets.push(total_size);
        total_size += self.package_status.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.id.as_slice())?;
        writer.write_all(self.special_cards.as_slice())?;
        writer.write_all(self.hp.as_slice())?;
        writer.write_all(self.gold.as_slice())?;
        writer.write_all(self.power.as_slice())?;
        writer.write_all(self.motion.as_slice())?;
        writer.write_all(self.view_range.as_slice())?;
        writer.write_all(self.armor.as_slice())?;
        writer.write_all(self.shield.as_slice())?;
        writer.write_all(self.attack.as_slice())?;
        writer.write_all(self.attack_weak.as_slice())?;
        writer.write_all(self.defense.as_slice())?;
        writer.write_all(self.defense_weak.as_slice())?;
        writer.write_all(self.physique.as_slice())?;
        writer.write_all(self.draw_count.as_slice())?;
        writer.write_all(self.deck_status.as_slice())?;
        writer.write_all(self.package_status.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Warrior::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct WarriorVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WarriorVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WarriorVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WarriorVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for WarriorVec {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        WarriorVec::new_unchecked(v)
    }
}
impl WarriorVec {
    const DEFAULT_VALUE: [u8; 4] = [4, 0, 0, 0];
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Warrior> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Warrior {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            Warrior::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            Warrior::new_unchecked(self.0.slice(start..end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> WarriorVecReader<'r> {
        WarriorVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WarriorVec {
    type Builder = WarriorVecBuilder;
    const NAME: &'static str = "WarriorVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WarriorVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WarriorVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WarriorVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct WarriorVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WarriorVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WarriorVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WarriorVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> WarriorVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<WarriorReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> WarriorReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            WarriorReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            WarriorReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WarriorVecReader<'r> {
    type Entity = WarriorVec;
    const NAME: &'static str = "WarriorVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        WarriorVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            WarriorReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct WarriorVecBuilder(pub(crate) Vec<Warrior>);
impl WarriorVecBuilder {
    pub fn set(mut self, v: Vec<Warrior>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Warrior) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Warrior>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: Warrior) -> Option<Warrior> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for WarriorVecBuilder {
    type Entity = WarriorVec;
    const NAME: &'static str = "WarriorVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WarriorVec::new_unchecked(inner.into())
    }
}
pub struct WarriorVecIterator(WarriorVec, usize, usize);
impl ::core::iter::Iterator for WarriorVecIterator {
    type Item = Warrior;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for WarriorVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for WarriorVec {
    type Item = Warrior;
    type IntoIter = WarriorVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        WarriorVecIterator(self, 0, len)
    }
}
impl<'r> WarriorVecReader<'r> {
    pub fn iter<'t>(&'t self) -> WarriorVecReaderIterator<'t, 'r> {
        WarriorVecReaderIterator(&self, 0, self.len())
    }
}
pub struct WarriorVecReaderIterator<'t, 'r>(&'t WarriorVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for WarriorVecReaderIterator<'t, 'r> {
    type Item = WarriorReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for WarriorVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct Potion(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Potion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Potion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Potion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "count", self.count())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "gold", self.gold())?;
        write!(f, ", {}: {}", "power", self.power())?;
        write!(f, ", {}: {}", "motion", self.motion())?;
        write!(f, ", {}: {}", "view_range", self.view_range())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "physique", self.physique())?;
        write!(f, ", {}: {}", "draw_count", self.draw_count())?;
        write!(f, ", {}: {}", "deck_status", self.deck_status())?;
        write!(f, ", {}: {}", "package_status", self.package_status())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Potion {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        Potion::new_unchecked(v)
    }
}
impl Potion {
    const DEFAULT_VALUE: [u8; 80] = [
        80, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0,
        66, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0,
        76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 14;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn count(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn hp(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn gold(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn power(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn motion(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn view_range(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn armor(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn shield(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn attack(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn defense(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn physique(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn draw_count(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn deck_status(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        ResourceIdVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn package_status(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[60..]) as usize;
            ResourceIdVec::new_unchecked(self.0.slice(start..end))
        } else {
            ResourceIdVec::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> PotionReader<'r> {
        PotionReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Potion {
    type Builder = PotionBuilder;
    const NAME: &'static str = "Potion";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Potion(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PotionReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PotionReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .count(self.count())
            .hp(self.hp())
            .gold(self.gold())
            .power(self.power())
            .motion(self.motion())
            .view_range(self.view_range())
            .armor(self.armor())
            .shield(self.shield())
            .attack(self.attack())
            .defense(self.defense())
            .physique(self.physique())
            .draw_count(self.draw_count())
            .deck_status(self.deck_status())
            .package_status(self.package_status())
    }
}
#[derive(Clone, Copy)]
pub struct PotionReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PotionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PotionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PotionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "count", self.count())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "gold", self.gold())?;
        write!(f, ", {}: {}", "power", self.power())?;
        write!(f, ", {}: {}", "motion", self.motion())?;
        write!(f, ", {}: {}", "view_range", self.view_range())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "physique", self.physique())?;
        write!(f, ", {}: {}", "draw_count", self.draw_count())?;
        write!(f, ", {}: {}", "deck_status", self.deck_status())?;
        write!(f, ", {}: {}", "package_status", self.package_status())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> PotionReader<'r> {
    pub const FIELD_COUNT: usize = 14;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn count(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn hp(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn gold(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn power(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn motion(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn view_range(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn armor(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn shield(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn attack(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn defense(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn physique(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        let end = molecule::unpack_number(&slice[48..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn draw_count(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[48..]) as usize;
        let end = molecule::unpack_number(&slice[52..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn deck_status(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[52..]) as usize;
        let end = molecule::unpack_number(&slice[56..]) as usize;
        ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn package_status(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[56..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[60..]) as usize;
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for PotionReader<'r> {
    type Entity = Potion;
    const NAME: &'static str = "PotionReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        PotionReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ByteReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ByteReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        ByteReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        ByteReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        ByteReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        ByteReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        ByteReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        ByteReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        ByteReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        ByteReader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        ByteReader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        ByteReader::verify(&slice[offsets[11]..offsets[12]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[12]..offsets[13]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[13]..offsets[14]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct PotionBuilder {
    pub(crate) count: Byte,
    pub(crate) hp: Byte,
    pub(crate) gold: Byte,
    pub(crate) power: Byte,
    pub(crate) motion: Byte,
    pub(crate) view_range: Byte,
    pub(crate) armor: Byte,
    pub(crate) shield: Byte,
    pub(crate) attack: Byte,
    pub(crate) defense: Byte,
    pub(crate) physique: Byte,
    pub(crate) draw_count: Byte,
    pub(crate) deck_status: ResourceIdVec,
    pub(crate) package_status: ResourceIdVec,
}
impl PotionBuilder {
    pub const FIELD_COUNT: usize = 14;
    pub fn count(mut self, v: Byte) -> Self {
        self.count = v;
        self
    }
    pub fn hp(mut self, v: Byte) -> Self {
        self.hp = v;
        self
    }
    pub fn gold(mut self, v: Byte) -> Self {
        self.gold = v;
        self
    }
    pub fn power(mut self, v: Byte) -> Self {
        self.power = v;
        self
    }
    pub fn motion(mut self, v: Byte) -> Self {
        self.motion = v;
        self
    }
    pub fn view_range(mut self, v: Byte) -> Self {
        self.view_range = v;
        self
    }
    pub fn armor(mut self, v: Byte) -> Self {
        self.armor = v;
        self
    }
    pub fn shield(mut self, v: Byte) -> Self {
        self.shield = v;
        self
    }
    pub fn attack(mut self, v: Byte) -> Self {
        self.attack = v;
        self
    }
    pub fn defense(mut self, v: Byte) -> Self {
        self.defense = v;
        self
    }
    pub fn physique(mut self, v: Byte) -> Self {
        self.physique = v;
        self
    }
    pub fn draw_count(mut self, v: Byte) -> Self {
        self.draw_count = v;
        self
    }
    pub fn deck_status(mut self, v: ResourceIdVec) -> Self {
        self.deck_status = v;
        self
    }
    pub fn package_status(mut self, v: ResourceIdVec) -> Self {
        self.package_status = v;
        self
    }
}
impl molecule::prelude::Builder for PotionBuilder {
    type Entity = Potion;
    const NAME: &'static str = "PotionBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.count.as_slice().len()
            + self.hp.as_slice().len()
            + self.gold.as_slice().len()
            + self.power.as_slice().len()
            + self.motion.as_slice().len()
            + self.view_range.as_slice().len()
            + self.armor.as_slice().len()
            + self.shield.as_slice().len()
            + self.attack.as_slice().len()
            + self.defense.as_slice().len()
            + self.physique.as_slice().len()
            + self.draw_count.as_slice().len()
            + self.deck_status.as_slice().len()
            + self.package_status.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.count.as_slice().len();
        offsets.push(total_size);
        total_size += self.hp.as_slice().len();
        offsets.push(total_size);
        total_size += self.gold.as_slice().len();
        offsets.push(total_size);
        total_size += self.power.as_slice().len();
        offsets.push(total_size);
        total_size += self.motion.as_slice().len();
        offsets.push(total_size);
        total_size += self.view_range.as_slice().len();
        offsets.push(total_size);
        total_size += self.armor.as_slice().len();
        offsets.push(total_size);
        total_size += self.shield.as_slice().len();
        offsets.push(total_size);
        total_size += self.attack.as_slice().len();
        offsets.push(total_size);
        total_size += self.defense.as_slice().len();
        offsets.push(total_size);
        total_size += self.physique.as_slice().len();
        offsets.push(total_size);
        total_size += self.draw_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.deck_status.as_slice().len();
        offsets.push(total_size);
        total_size += self.package_status.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.count.as_slice())?;
        writer.write_all(self.hp.as_slice())?;
        writer.write_all(self.gold.as_slice())?;
        writer.write_all(self.power.as_slice())?;
        writer.write_all(self.motion.as_slice())?;
        writer.write_all(self.view_range.as_slice())?;
        writer.write_all(self.armor.as_slice())?;
        writer.write_all(self.shield.as_slice())?;
        writer.write_all(self.attack.as_slice())?;
        writer.write_all(self.defense.as_slice())?;
        writer.write_all(self.physique.as_slice())?;
        writer.write_all(self.draw_count.as_slice())?;
        writer.write_all(self.deck_status.as_slice())?;
        writer.write_all(self.package_status.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Potion::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct PotionOpt(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for PotionOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for PotionOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for PotionOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl ::core::default::Default for PotionOpt {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        PotionOpt::new_unchecked(v)
    }
}
impl PotionOpt {
    const DEFAULT_VALUE: [u8; 0] = [];
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<Potion> {
        if self.is_none() {
            None
        } else {
            Some(Potion::new_unchecked(self.0.clone()))
        }
    }
    pub fn as_reader<'r>(&'r self) -> PotionOptReader<'r> {
        PotionOptReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for PotionOpt {
    type Builder = PotionOptBuilder;
    const NAME: &'static str = "PotionOpt";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        PotionOpt(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PotionOptReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PotionOptReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_opt())
    }
}
#[derive(Clone, Copy)]
pub struct PotionOptReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PotionOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PotionOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PotionOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl<'r> PotionOptReader<'r> {
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<PotionReader<'r>> {
        if self.is_none() {
            None
        } else {
            Some(PotionReader::new_unchecked(self.as_slice()))
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for PotionOptReader<'r> {
    type Entity = PotionOpt;
    const NAME: &'static str = "PotionOptReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        PotionOptReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        if !slice.is_empty() {
            PotionReader::verify(&slice[..], compatible)?;
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct PotionOptBuilder(pub(crate) Option<Potion>);
impl PotionOptBuilder {
    pub fn set(mut self, v: Option<Potion>) -> Self {
        self.0 = v;
        self
    }
}
impl molecule::prelude::Builder for PotionOptBuilder {
    type Entity = PotionOpt;
    const NAME: &'static str = "PotionOptBuilder";
    fn expected_length(&self) -> usize {
        self.0
            .as_ref()
            .map(|ref inner| inner.as_slice().len())
            .unwrap_or(0)
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        self.0
            .as_ref()
            .map(|ref inner| writer.write_all(inner.as_slice()))
            .unwrap_or(Ok(()))
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        PotionOpt::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ActionContext(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ActionContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ActionContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ActionContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "random", self.random())?;
        write!(f, ", {}: {}", "action_pool", self.action_pool())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ActionContext {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        ActionContext::new_unchecked(v)
    }
}
impl ActionContext {
    const DEFAULT_VALUE: [u8; 17] = [17, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0];
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn random(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn action_pool(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            ResourceIdVec::new_unchecked(self.0.slice(start..end))
        } else {
            ResourceIdVec::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> ActionContextReader<'r> {
        ActionContextReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ActionContext {
    type Builder = ActionContextBuilder;
    const NAME: &'static str = "ActionContext";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ActionContext(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionContextReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionContextReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .random(self.random())
            .action_pool(self.action_pool())
    }
}
#[derive(Clone, Copy)]
pub struct ActionContextReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ActionContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ActionContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ActionContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "random", self.random())?;
        write!(f, ", {}: {}", "action_pool", self.action_pool())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ActionContextReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn random(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn action_pool(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            ResourceIdVecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ActionContextReader<'r> {
    type Entity = ActionContext;
    const NAME: &'static str = "ActionContextReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ActionContextReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ByteReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct ActionContextBuilder {
    pub(crate) random: Byte,
    pub(crate) action_pool: ResourceIdVec,
}
impl ActionContextBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn random(mut self, v: Byte) -> Self {
        self.random = v;
        self
    }
    pub fn action_pool(mut self, v: ResourceIdVec) -> Self {
        self.action_pool = v;
        self
    }
}
impl molecule::prelude::Builder for ActionContextBuilder {
    type Entity = ActionContext;
    const NAME: &'static str = "ActionContextBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.random.as_slice().len()
            + self.action_pool.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.random.as_slice().len();
        offsets.push(total_size);
        total_size += self.action_pool.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.random.as_slice())?;
        writer.write_all(self.action_pool.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ActionContext::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Enemy(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Enemy {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Enemy {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Enemy {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "rank", self.rank())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "attack_weak", self.attack_weak())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "defense_weak", self.defense_weak())?;
        write!(f, ", {}: {}", "loot_pool", self.loot_pool())?;
        write!(f, ", {}: {}", "action_strategy", self.action_strategy())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Enemy {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        Enemy::new_unchecked(v)
    }
}
impl Enemy {
    const DEFAULT_VALUE: [u8; 80] = [
        80, 0, 0, 0, 48, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0,
        56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    pub const FIELD_COUNT: usize = 11;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> ResourceId {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ResourceId::new_unchecked(self.0.slice(start..end))
    }
    pub fn rank(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn hp(&self) -> Number {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Number::new_unchecked(self.0.slice(start..end))
    }
    pub fn armor(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn shield(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn attack(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn attack_weak(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn defense(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn defense_weak(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn loot_pool(&self) -> ResourceIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        ResourceIdVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn action_strategy(&self) -> ActionContext {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[48..]) as usize;
            ActionContext::new_unchecked(self.0.slice(start..end))
        } else {
            ActionContext::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> EnemyReader<'r> {
        EnemyReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Enemy {
    type Builder = EnemyBuilder;
    const NAME: &'static str = "Enemy";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Enemy(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        EnemyReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        EnemyReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .id(self.id())
            .rank(self.rank())
            .hp(self.hp())
            .armor(self.armor())
            .shield(self.shield())
            .attack(self.attack())
            .attack_weak(self.attack_weak())
            .defense(self.defense())
            .defense_weak(self.defense_weak())
            .loot_pool(self.loot_pool())
            .action_strategy(self.action_strategy())
    }
}
#[derive(Clone, Copy)]
pub struct EnemyReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for EnemyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for EnemyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for EnemyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "id", self.id())?;
        write!(f, ", {}: {}", "rank", self.rank())?;
        write!(f, ", {}: {}", "hp", self.hp())?;
        write!(f, ", {}: {}", "armor", self.armor())?;
        write!(f, ", {}: {}", "shield", self.shield())?;
        write!(f, ", {}: {}", "attack", self.attack())?;
        write!(f, ", {}: {}", "attack_weak", self.attack_weak())?;
        write!(f, ", {}: {}", "defense", self.defense())?;
        write!(f, ", {}: {}", "defense_weak", self.defense_weak())?;
        write!(f, ", {}: {}", "loot_pool", self.loot_pool())?;
        write!(f, ", {}: {}", "action_strategy", self.action_strategy())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> EnemyReader<'r> {
    pub const FIELD_COUNT: usize = 11;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn id(&self) -> ResourceIdReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        ResourceIdReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn rank(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn hp(&self) -> NumberReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        NumberReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn armor(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn shield(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn attack(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn attack_weak(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn defense(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn defense_weak(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn loot_pool(&self) -> ResourceIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        let end = molecule::unpack_number(&slice[44..]) as usize;
        ResourceIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn action_strategy(&self) -> ActionContextReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[44..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[48..]) as usize;
            ActionContextReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            ActionContextReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for EnemyReader<'r> {
    type Entity = Enemy;
    const NAME: &'static str = "EnemyReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        EnemyReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ResourceIdReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ByteReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        NumberReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        ByteReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        ByteReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        ByteReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        ByteReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        ByteReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        ByteReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        ResourceIdVecReader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        ActionContextReader::verify(&slice[offsets[10]..offsets[11]], compatible)?;
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct EnemyBuilder {
    pub(crate) id: ResourceId,
    pub(crate) rank: Byte,
    pub(crate) hp: Number,
    pub(crate) armor: Byte,
    pub(crate) shield: Byte,
    pub(crate) attack: Byte,
    pub(crate) attack_weak: Byte,
    pub(crate) defense: Byte,
    pub(crate) defense_weak: Byte,
    pub(crate) loot_pool: ResourceIdVec,
    pub(crate) action_strategy: ActionContext,
}
impl EnemyBuilder {
    pub const FIELD_COUNT: usize = 11;
    pub fn id(mut self, v: ResourceId) -> Self {
        self.id = v;
        self
    }
    pub fn rank(mut self, v: Byte) -> Self {
        self.rank = v;
        self
    }
    pub fn hp(mut self, v: Number) -> Self {
        self.hp = v;
        self
    }
    pub fn armor(mut self, v: Byte) -> Self {
        self.armor = v;
        self
    }
    pub fn shield(mut self, v: Byte) -> Self {
        self.shield = v;
        self
    }
    pub fn attack(mut self, v: Byte) -> Self {
        self.attack = v;
        self
    }
    pub fn attack_weak(mut self, v: Byte) -> Self {
        self.attack_weak = v;
        self
    }
    pub fn defense(mut self, v: Byte) -> Self {
        self.defense = v;
        self
    }
    pub fn defense_weak(mut self, v: Byte) -> Self {
        self.defense_weak = v;
        self
    }
    pub fn loot_pool(mut self, v: ResourceIdVec) -> Self {
        self.loot_pool = v;
        self
    }
    pub fn action_strategy(mut self, v: ActionContext) -> Self {
        self.action_strategy = v;
        self
    }
}
impl molecule::prelude::Builder for EnemyBuilder {
    type Entity = Enemy;
    const NAME: &'static str = "EnemyBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.id.as_slice().len()
            + self.rank.as_slice().len()
            + self.hp.as_slice().len()
            + self.armor.as_slice().len()
            + self.shield.as_slice().len()
            + self.attack.as_slice().len()
            + self.attack_weak.as_slice().len()
            + self.defense.as_slice().len()
            + self.defense_weak.as_slice().len()
            + self.loot_pool.as_slice().len()
            + self.action_strategy.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.id.as_slice().len();
        offsets.push(total_size);
        total_size += self.rank.as_slice().len();
        offsets.push(total_size);
        total_size += self.hp.as_slice().len();
        offsets.push(total_size);
        total_size += self.armor.as_slice().len();
        offsets.push(total_size);
        total_size += self.shield.as_slice().len();
        offsets.push(total_size);
        total_size += self.attack.as_slice().len();
        offsets.push(total_size);
        total_size += self.attack_weak.as_slice().len();
        offsets.push(total_size);
        total_size += self.defense.as_slice().len();
        offsets.push(total_size);
        total_size += self.defense_weak.as_slice().len();
        offsets.push(total_size);
        total_size += self.loot_pool.as_slice().len();
        offsets.push(total_size);
        total_size += self.action_strategy.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.id.as_slice())?;
        writer.write_all(self.rank.as_slice())?;
        writer.write_all(self.hp.as_slice())?;
        writer.write_all(self.armor.as_slice())?;
        writer.write_all(self.shield.as_slice())?;
        writer.write_all(self.attack.as_slice())?;
        writer.write_all(self.attack_weak.as_slice())?;
        writer.write_all(self.defense.as_slice())?;
        writer.write_all(self.defense_weak.as_slice())?;
        writer.write_all(self.loot_pool.as_slice())?;
        writer.write_all(self.action_strategy.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Enemy::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct EnemyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for EnemyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for EnemyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for EnemyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for EnemyVec {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        EnemyVec::new_unchecked(v)
    }
}
impl EnemyVec {
    const DEFAULT_VALUE: [u8; 4] = [4, 0, 0, 0];
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Enemy> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Enemy {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            Enemy::new_unchecked(self.0.slice(start..))
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            Enemy::new_unchecked(self.0.slice(start..end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> EnemyVecReader<'r> {
        EnemyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for EnemyVec {
    type Builder = EnemyVecBuilder;
    const NAME: &'static str = "EnemyVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        EnemyVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        EnemyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        EnemyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct EnemyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for EnemyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for EnemyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for EnemyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> EnemyVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<EnemyReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> EnemyReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 {
            EnemyReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            EnemyReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for EnemyVecReader<'r> {
    type Entity = EnemyVec;
    const NAME: &'static str = "EnemyVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        EnemyVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            EnemyReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct EnemyVecBuilder(pub(crate) Vec<Enemy>);
impl EnemyVecBuilder {
    pub fn set(mut self, v: Vec<Enemy>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Enemy) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Enemy>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: Enemy) -> Option<Enemy> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for EnemyVecBuilder {
    type Entity = EnemyVec;
    const NAME: &'static str = "EnemyVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        EnemyVec::new_unchecked(inner.into())
    }
}
pub struct EnemyVecIterator(EnemyVec, usize, usize);
impl ::core::iter::Iterator for EnemyVecIterator {
    type Item = Enemy;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for EnemyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for EnemyVec {
    type Item = Enemy;
    type IntoIter = EnemyVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        EnemyVecIterator(self, 0, len)
    }
}
impl<'r> EnemyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> EnemyVecReaderIterator<'t, 'r> {
        EnemyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct EnemyVecReaderIterator<'t, 'r>(&'t EnemyVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for EnemyVecReaderIterator<'t, 'r> {
    type Item = EnemyReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for EnemyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
